version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: enterprise_postgres
    environment:
      POSTGRES_DB: enterprise_admin
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - enterprise_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: enterprise_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - enterprise_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: enterprise_backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/enterprise_admin
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key-change-in-production
      - DEBUG=true
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - enterprise_network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: enterprise_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
    networks:
      - enterprise_network

volumes:
  postgres_data:
  redis_data:
  backend_uploads:

networks:
  enterprise_network:
    driver: bridge 
